"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[456],{6758:(s,a,n)=>{n.r(a),n.d(a,{default:()=>b});var e=n(4386);const l=(0,e._)("h1",{id:"lua-api",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#lua-api","aria-hidden":"true"},"#"),(0,e.Uk)(" LUA API")],-1),o=(0,e.Uk)("系统采用"),p={href:"https://www.lua.org/manual/5.4/manual.html",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("Lua5.4"),t=(0,e.Uk)("实现。"),c=(0,e.uE)("<li>支持大部分原生lua函数(少数危险API例外)</li><li>可以支持两种文件类型 编译好的 <code>.psr</code> 和 <code>.lua</code></li><li>编译好的 <code>.psr</code> 是下载的成品脚本,里面包含了<code>受保护的</code>lua和res<code>资源</code>，无法改动</li><li><code>.lua</code> 脚本是自己写的，可以改动</li><li><code>.lua</code> 脚本写好后，你可以选择使用工具编译为 <code>.psr</code> 文件发布</li>",5),i=(0,e.uE)('<h2 id="基础库" tabindex="-1"><a class="header-anchor" href="#基础库" aria-hidden="true">#</a> 基础库</h2><ul><li><a href="#op">op</a> 提供图色识别功能</li><li><a href="#game">game</a> 提供主机操作功能</li></ul><h2 id="主机库" tabindex="-1"><a class="header-anchor" href="#主机库" aria-hidden="true">#</a> 主机库</h2>',3),d=(0,e.Uk)("xbox"),h=(0,e.Uk)("playstation"),u=(0,e.uE)('<h2 id="基础介绍" tabindex="-1"><a class="header-anchor" href="#基础介绍" aria-hidden="true">#</a> 基础介绍</h2><h3 id="脚本基础结构" tabindex="-1"><a class="header-anchor" href="#脚本基础结构" aria-hidden="true">#</a> 脚本基础结构</h3><ul><li>脚本由若干 LUA 文件与 res 目录组成</li><li>脚本必须包含一个 <code>main</code> 函数</li><li>脚本引擎启动时，会自动调用脚本中的 <code>main</code> 函数开始运行</li></ul><blockquote><p>一个最简单的脚本:</p></blockquote><div class="language-lua ext-lua line-numbers-mode"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">function</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">main</span><span style="color:#C9D1D9;">()   </span></span>\n<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#79C0FF;">print</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;hello world&quot;</span><span style="color:#C9D1D9;">)   </span></span>\n<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">end</span><span style="color:#C9D1D9;">   </span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="全局变量" tabindex="-1"><a class="header-anchor" href="#全局变量" aria-hidden="true">#</a> 全局变量</h3><blockquote><p>所有以下划线开头的变量都是系统变量，不能修改</p></blockquote><div class="language-lua ext-lua line-numbers-mode"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#C9D1D9;">  _APP_VERSION      </span><span style="color:#8B949E;">-- 系统版本号   </span></span>\n<span class="line"><span style="color:#C9D1D9;">  _PATH             </span><span style="color:#8B949E;">-- 当前脚本所在目录   </span></span>\n<span class="line"><span style="color:#C9D1D9;">  _FILENAME         </span><span style="color:#8B949E;">-- 当前运行脚本的文件名(入口文件)   </span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="全局函数" tabindex="-1"><a class="header-anchor" href="#全局函数" aria-hidden="true">#</a> 全局函数</h2><h3 id="print" tabindex="-1"><a class="header-anchor" href="#print" aria-hidden="true">#</a> print</h3><h4 id="函数简介" tabindex="-1"><a class="header-anchor" href="#函数简介" aria-hidden="true">#</a> 函数简介:</h4><blockquote><p>显示信息</p></blockquote><div class="language-lua ext-lua line-numbers-mode"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#79C0FF;">print</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;Hello World!&quot;</span><span style="color:#C9D1D9;">)   </span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="wait" tabindex="-1"><a class="header-anchor" href="#wait" aria-hidden="true">#</a> wait</h3><h4 id="函数简介-1" tabindex="-1"><a class="header-anchor" href="#函数简介-1" aria-hidden="true">#</a> 函数简介:</h4><blockquote><p>让脚本等待一定时间再向下运行</p></blockquote><div class="language-lua ext-lua line-numbers-mode"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#79C0FF;">print</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;Hello World!&quot;</span><span style="color:#C9D1D9;">)   </span></span>\n<span class="line"><span style="color:#79C0FF;">wait</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;">)   </span><span style="color:#8B949E;">-- 等待一秒   </span></span>\n<span class="line"><span style="color:#79C0FF;">print</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;Hello World!&quot;</span><span style="color:#C9D1D9;">)   </span></span>\n<span class="line"><span style="color:#79C0FF;">wait</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">0.2</span><span style="color:#C9D1D9;">) </span><span style="color:#8B949E;">-- 等待0.2秒   </span></span>\n<span class="line"><span style="color:#79C0FF;">print</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;Hello World!&quot;</span><span style="color:#C9D1D9;">)   </span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="sleep" tabindex="-1"><a class="header-anchor" href="#sleep" aria-hidden="true">#</a> sleep</h3><h4 id="函数简介-2" tabindex="-1"><a class="header-anchor" href="#函数简介-2" aria-hidden="true">#</a> 函数简介:</h4><blockquote><p>让脚本等待一定时间再向下运行,与上面的函数一样，只不过参数是毫秒</p></blockquote><div class="language-lua ext-lua line-numbers-mode"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#79C0FF;">print</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;Hello World!&quot;</span><span style="color:#C9D1D9;">)   </span></span>\n<span class="line"><span style="color:#79C0FF;">sleep</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">1000</span><span style="color:#C9D1D9;">)   </span><span style="color:#8B949E;">-- 等待一秒   </span></span>\n<span class="line"><span style="color:#79C0FF;">print</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;Hello World!&quot;</span><span style="color:#C9D1D9;">)   </span></span>\n<span class="line"><span style="color:#79C0FF;">sleep</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">200</span><span style="color:#C9D1D9;">) </span><span style="color:#8B949E;">-- 等待0.2秒   </span></span>\n<span class="line"><span style="color:#79C0FF;">print</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;Hello World!&quot;</span><span style="color:#C9D1D9;">)   </span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="load-module" tabindex="-1"><a class="header-anchor" href="#load-module" aria-hidden="true">#</a> load_module</h3><h4 id="load-a-module" tabindex="-1"><a class="header-anchor" href="#load-a-module" aria-hidden="true">#</a> Load a module</h4><blockquote><p>加载一个三方库，成功加载以后，你可以使用三方库提供的功能函数</p></blockquote><div class="language-lua ext-lua line-numbers-mode"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#FF7B72;">local</span><span style="color:#C9D1D9;"> ret </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">load_module</span><span style="color:#C9D1D9;">( _PATH  </span><span style="color:#FF7B72;">..</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;base.psr&quot;</span><span style="color:#C9D1D9;">,_ENV)   </span></span>\n<span class="line"><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;"> ret </span><span style="color:#FF7B72;">then</span><span style="color:#C9D1D9;">   </span></span>\n<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#79C0FF;">print</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;load module success&quot;</span><span style="color:#C9D1D9;">)   </span></span>\n<span class="line"><span style="color:#FF7B72;">else</span><span style="color:#C9D1D9;">   </span></span>\n<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#79C0FF;">print</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;load module failed&quot;</span><span style="color:#C9D1D9;">)   </span></span>\n<span class="line"><span style="color:#FF7B72;">end</span><span style="color:#C9D1D9;">   </span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><hr><h2 id="op" tabindex="-1"><a class="header-anchor" href="#op" aria-hidden="true">#</a> op</h2><h3 id="ver" tabindex="-1"><a class="header-anchor" href="#ver" aria-hidden="true">#</a> Ver</h3><blockquote><p>返回当前op的版本号</p></blockquote><div class="language-lua ext-lua line-numbers-mode"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#79C0FF;">print</span><span style="color:#C9D1D9;">( op.</span><span style="color:#79C0FF;">Ver</span><span style="color:#C9D1D9;">() )    </span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="setpath" tabindex="-1"><a class="header-anchor" href="#setpath" aria-hidden="true">#</a> SetPath</h3><blockquote><p>设置全局路径,设置了此路径后,所有接口调用中,相关的文件都相对于此路径. 比如图片,字库等.</p></blockquote><div class="language-lua ext-lua line-numbers-mode"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#C9D1D9;">op.</span><span style="color:#79C0FF;">SetPath</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;C:</span><span style="color:#79C0FF;">\\\\</span><span style="color:#A5D6FF;">test</span><span style="color:#79C0FF;">\\\\</span><span style="color:#A5D6FF;">res&quot;</span><span style="color:#C9D1D9;">)   </span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="findpic" tabindex="-1"><a class="header-anchor" href="#findpic" aria-hidden="true">#</a> FindPic</h3><h4 id="函数简介-3" tabindex="-1"><a class="header-anchor" href="#函数简介-3" aria-hidden="true">#</a> 函数简介:</h4><blockquote><p>查找指定区域内的图片,位图必须是24位色格式,支持透明色,当图像上下左右4个顶点的颜色一样时,则这个颜色将作为透明色处理.<br> 这个函数可以查找多个图片,只返回第一个找到的X Y坐标.</p></blockquote><h4 id="函数原型" tabindex="-1"><a class="header-anchor" href="#函数原型" aria-hidden="true">#</a> 函数原型:</h4><div class="language-vb ext-vb line-numbers-mode"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#C9D1D9;">long </span><span style="color:#D2A8FF;">FindPic</span><span style="color:#C9D1D9;">(x1, y1, x2, y2, pic_name, delta_color,sim, dir,intX, intY)   </span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="参数定义" tabindex="-1"><a class="header-anchor" href="#参数定义" aria-hidden="true">#</a> 参数定义:</h4><blockquote><p>x1 整形数:区域的左上X坐标<br> y1 整形数:区域的左上Y坐标<br> x2 整形数:区域的右下X坐标<br> y2 整形数:区域的右下Y坐标<br> pic_name 字符串:图片名,可以是多个图片,比如&quot;test.bmp|test2.bmp|test3.bmp&quot;<br> delta_color 字符串:颜色色偏比如&quot;203040&quot; 表示RGB的色偏分别是20 30 40 (这里是16进制表示)<br> sim 双精度浮点数:相似度,取值范围0.1-1.0<br> dir 整形数:查找方向 0: 从左到右,从上到下 1: 从左到右,从下到上 2: 从右到左,从上到下 3: 从右到左, 从下到上<br> intX 变参指针:返回图片左上角的X坐标<br> intY 变参指针:返回图片左上角的Y坐标</p></blockquote><h4 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值" aria-hidden="true">#</a> 返回值:</h4><p>整形数:</p><blockquote><p>返回找到的图片的序号,从0开始索引.如果没找到返回-1</p></blockquote><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例:</h4><div class="language-lua ext-lua line-numbers-mode"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#FF7B72;">local</span><span style="color:#C9D1D9;"> idx,x,y </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> op.</span><span style="color:#79C0FF;">FindPic</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">892</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">52</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">906</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">64</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;a.bmp&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;202020&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">0.9</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">0</span><span style="color:#C9D1D9;">)   </span></span>\n<span class="line"><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">-</span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">==</span><span style="color:#C9D1D9;"> idx </span><span style="color:#FF7B72;">then</span><span style="color:#C9D1D9;">    </span></span>\n<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#79C0FF;">print</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;没找到哦&quot;</span><span style="color:#C9D1D9;">)   </span></span>\n<span class="line"><span style="color:#FF7B72;">else</span><span style="color:#C9D1D9;">   </span></span>\n<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#79C0FF;">print</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;找到了，坐标在&quot;</span><span style="color:#C9D1D9;">,x,y)   </span></span>\n<span class="line"><span style="color:#FF7B72;">end</span><span style="color:#C9D1D9;">   </span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="capture" tabindex="-1"><a class="header-anchor" href="#capture" aria-hidden="true">#</a> Capture</h3><h4 id="函数简介-4" tabindex="-1"><a class="header-anchor" href="#函数简介-4" aria-hidden="true">#</a> 函数简介:</h4><blockquote><p>抓取指定区域(x1, y1, x2, y2)的图像,保存为file(24位位图)</p></blockquote><h4 id="函数原型-1" tabindex="-1"><a class="header-anchor" href="#函数原型-1" aria-hidden="true">#</a> 函数原型:</h4><div class="language-vb ext-vb line-numbers-mode"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#C9D1D9;">long </span><span style="color:#D2A8FF;">Capture</span><span style="color:#C9D1D9;">(x1, y1, x2, y2, file)   </span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="参数定义-1" tabindex="-1"><a class="header-anchor" href="#参数定义-1" aria-hidden="true">#</a> 参数定义:</h4><blockquote><p>x1 整形数:区域的左上X坐标<br> y1 整形数:区域的左上Y坐标<br> x2 整形数:区域的右下X坐标<br> y2 整形数:区域的右下Y坐标<br> file 字符串:保存的文件名,保存的地方一般为SetPath中设置的目录,当然这里也可以指定全路径名.</p></blockquote><h4 id="返回值-1" tabindex="-1"><a class="header-anchor" href="#返回值-1" aria-hidden="true">#</a> 返回值:</h4><blockquote><p>0:失败<br> 1:成功</p></blockquote><h4 id="示例-1" tabindex="-1"><a class="header-anchor" href="#示例-1" aria-hidden="true">#</a> 示例:</h4><div class="language-lua ext-lua line-numbers-mode"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#C9D1D9;">ret </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> op.</span><span style="color:#79C0FF;">Capture</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">0</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">0</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">2000</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">2000</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;screen.bmp&quot;</span><span style="color:#C9D1D9;">)   </span></span>\n<span class="line"><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">==</span><span style="color:#C9D1D9;"> ret </span><span style="color:#FF7B72;">then</span><span style="color:#C9D1D9;">    </span></span>\n<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#79C0FF;">print</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;截图成功&quot;</span><span style="color:#C9D1D9;">)   </span></span>\n<span class="line"><span style="color:#FF7B72;">end</span><span style="color:#C9D1D9;">   </span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="setshowerrormsg" tabindex="-1"><a class="header-anchor" href="#setshowerrormsg" aria-hidden="true">#</a> SetShowErrorMsg</h3><h4 id="函数简介-5" tabindex="-1"><a class="header-anchor" href="#函数简介-5" aria-hidden="true">#</a> 函数简介:</h4><blockquote><p>设置是否弹出错误信息,默认是打开.</p></blockquote><h4 id="函数原型-2" tabindex="-1"><a class="header-anchor" href="#函数原型-2" aria-hidden="true">#</a> 函数原型:</h4><div class="language-vb ext-vb line-numbers-mode"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#C9D1D9;">long </span><span style="color:#D2A8FF;">SetShowErrorMsg</span><span style="color:#C9D1D9;">(show)   </span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="参数定义-2" tabindex="-1"><a class="header-anchor" href="#参数定义-2" aria-hidden="true">#</a> 参数定义:</h4><blockquote><p>show 0表示不打开,1表示打开，2表示将错误信息写入文件</p></blockquote><h4 id="返回值-2" tabindex="-1"><a class="header-anchor" href="#返回值-2" aria-hidden="true">#</a> 返回值:</h4><blockquote><p>0 : 失败<br> 1 : 成功</p></blockquote><h4 id="示例-2" tabindex="-1"><a class="header-anchor" href="#示例-2" aria-hidden="true">#</a> 示例:</h4><div class="language-lua ext-lua line-numbers-mode"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#C9D1D9;">op_ret </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> op.</span><span style="color:#79C0FF;">SetShowErrorMsg</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">0</span><span style="color:#C9D1D9;">)   </span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><hr><h2 id="game" tabindex="-1"><a class="header-anchor" href="#game" aria-hidden="true">#</a> game</h2><h3 id="loadres" tabindex="-1"><a class="header-anchor" href="#loadres" aria-hidden="true">#</a> LoadRes</h3><blockquote><p>加载一个脚本模块,加载之后便可以使用模块提供的函数</p></blockquote><div class="language-lua ext-lua line-numbers-mode"><pre class="shiki" style="background-color:#0d1117;"><code><span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">-- 此处的 _PATH 是一个系统变量，指定当前运行脚本的目录   </span></span>\n<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">-- 参数为路径，格式，_ENV (目前格式与_ENV为固定写法，照抄即可)   </span></span>\n<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">-- 加载当前脚本目录下的 base.psr 模块     </span></span>\n<span class="line"><span style="color:#C9D1D9;">    game.</span><span style="color:#79C0FF;">LoadRes</span><span style="color:#C9D1D9;">( _PATH </span><span style="color:#FF7B72;">..</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;base.psr&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;bt&quot;</span><span style="color:#C9D1D9;">,_ENV)   </span></span>\n<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">-- 加载后便可以调用base.psr中的函数了   </span></span>\n<span class="line"></span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="主机函数" tabindex="-1"><a class="header-anchor" href="#主机函数" aria-hidden="true">#</a> 主机函数</h2><blockquote><p>好了，基础介绍完了，下面选择你的主机吧，开始介绍不同主机的特殊函数</p></blockquote><h3 id="xbox" tabindex="-1"><a class="header-anchor" href="#xbox" aria-hidden="true">#</a> <a href="xbox">XBOX</a></h3><h3 id="playstation" tabindex="-1"><a class="header-anchor" href="#playstation" aria-hidden="true">#</a> <a href="playstation">PlayStation</a></h3><h3 id="switch" tabindex="-1"><a class="header-anchor" href="#switch" aria-hidden="true">#</a> <a href="switch">Switch</a></h3>',77),y={},b=(0,n(4110).Z)(y,[["render",function(s,a){const n=(0,e.up)("OutboundLink"),y=(0,e.up)("RouterLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[l,(0,e._)("ul",null,[(0,e._)("li",null,[o,(0,e._)("a",p,[r,(0,e.Wm)(n)]),t]),c]),i,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e.Wm)(y,{to:"/zh_TW/developer/xbox.html"},{default:(0,e.w5)((()=>[d])),_:1})]),(0,e._)("li",null,[(0,e.Wm)(y,{to:"/zh_TW/developer/playstation.html"},{default:(0,e.w5)((()=>[h])),_:1})])]),u],64)}]])},9069:(s,a,n)=>{n.r(a),n.d(a,{data:()=>e});const e={key:"v-251d966f",path:"/zh_TW/developer/base.html",title:"LUA API",lang:"zh-TW",frontmatter:{head:[["meta",{property:"og:url",content:"/zh_TW/developer/base.html"}],["meta",{property:"og:site_name",content:"GameAI.win"}],["meta",{property:"og:title",content:"LUA API"}],["meta",{property:"og:type",content:"article"}],["meta",{property:"og:locale",content:"zh-TW"}],["meta",{property:"og:locale:alternate",content:"en-US"}],["meta",{name:"twitter:card",content:"summary_large_image"}],["meta",{name:"twitter:image:alt",content:"GameAI.win"}],["meta",{property:"article:author",content:"JiaZeng"}],["meta",{property:"og:restrictions:age",content:"3+"}],["meta",{name:"twitter:creator",content:"UMajs"}]]},excerpt:"",headers:[{level:2,title:"基础库",slug:"基础库",children:[]},{level:2,title:"主机库",slug:"主机库",children:[]},{level:2,title:"基础介绍",slug:"基础介绍",children:[{level:3,title:"脚本基础结构",slug:"脚本基础结构",children:[]},{level:3,title:"全局变量",slug:"全局变量",children:[]}]},{level:2,title:"全局函数",slug:"全局函数",children:[{level:3,title:"print",slug:"print",children:[]},{level:3,title:"wait",slug:"wait",children:[]},{level:3,title:"sleep",slug:"sleep",children:[]},{level:3,title:"load_module",slug:"load-module",children:[]}]},{level:2,title:"op",slug:"op",children:[{level:3,title:"Ver",slug:"ver",children:[]},{level:3,title:"SetPath",slug:"setpath",children:[]},{level:3,title:"FindPic",slug:"findpic",children:[]},{level:3,title:"Capture",slug:"capture",children:[]},{level:3,title:"SetShowErrorMsg",slug:"setshowerrormsg",children:[]}]},{level:2,title:"game",slug:"game",children:[{level:3,title:"LoadRes",slug:"loadres",children:[]}]},{level:2,title:"主机函数",slug:"主机函数",children:[{level:3,title:"XBOX",slug:"xbox",children:[]},{level:3,title:"PlayStation",slug:"playstation",children:[]},{level:3,title:"Switch",slug:"switch",children:[]}]}],filePathRelative:"zh_TW/developer/base.md",git:{updatedTime:164691705e4,contributors:[{name:"master",email:"master@gameai.win",commits:1}]}}},4110:(s,a)=>{a.Z=(s,a)=>{for(const[n,e]of a)s[n]=e;return s}}}]);